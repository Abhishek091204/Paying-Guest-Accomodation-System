project phase 1(Major Project)Frontend and Backend
getting started

1.
Database setup
REST API

2.Model : Listing -->Place(Apartment,flat,house,villa,hotel,banglow)
#(basic Requirements)
title --> string
description -->string
Image  --> url
price --> number
location -->String
country -->string

in the video, we created a model of mongodb and saved some data into the database

we created a Models folder inside this folder
all the models of the project will be made
model.exports=Listing;

3. 
Init folder for initialisation

Listing variable contains schema
we deleted the previous data inserted and inserted the data of data.js file

4.create 

GET    /listings/new  --> form --> sumbit


<ul>
    <%for(let listing of allListings){%>
    <li><a href="/listings/<%=listing._id%>">
            <%=listing.title%>
        </a></li>
    <%}%>
</ul>


POST   /listings    


5.Update : Edit & Update Route

GET


6.DELETE
DELETE  /listing/:id


PROJECT(phase 1 b)
1.We apply the same styling to all pages using ejs-Mate 
<% layouts(____)-%>

2.Navbar
include bootstrap and js into the boilerplate 

Modularity in code is important

steps:
    create a includes folder in views folder 
    create navbar.ejs which contains the code of header 
    include it into the boilerplate.ejs using <%-include()%> 
    we comment out the form in index.ejs



51.

client-side validations
Form validations
When we enter data in the form, the browser andlor the web server will check to see that the data is
in the correct format and within the constraints set by the application.

Bootstrap validations-->For custom Bootstrap form validation messages, you’ll need to add the novalidate boolean attribute to your <form>
add the js also to get the function on the form
script.js
bootstrap websute 
font awesome 

success and failure test
something wrong in Form we enter
Like agree terms and failure 


Custome Error Handler 
WrapAsync 

Schema Validation
individual feild check
joi.dev multiple handling of validation-->npm package
schema for server side validation
define validation in schema.js file we newly created 
require in app.js

Validations for Schema
Middleware


DataBase Relationships
SQL Relationships
one to one 
one to many
many to many 

Project Phase2
Handling Deletion using Mongoose Middleware

one to many 
users posts 


Customer        Order
when the customer is deleted the order related to it will also be deleted


We can use 2 middlewares :
• Pre - run before the query is executed
• Post - run after the query is executed

Query middlewares



New Model : Reviews
• comment->string
• rating (1 to 5)->Number
• createdAt->date,time


the are listings for each hotel
listing1
listing2
1*n Relationship


created form for rating 
submitting a form adding to the database
pull operator 
listing review on page
deleting review using pull operator


deleting listing 

router 

web cookies
res.cookie(name.value)
reading cookie


What is State?
Stateful Protocol
Stateful Protocol require server to save the status and session information.
eg - ftp
Stateless Protocol
Stateless Protocol does not require the server to retain the server information o
eg - http

Express sessions
client  server
session id
store in temporary storage
npm i express-session
secret
app.use(session({secret:"mysecretstring"}));    usually strong
session id saved in the browser


SessionOptions 
by default no expiry data to cookies 
delete by closing the browser 

const sessionOptions = {
  secret: "mysecretcode",
  resave: false,
  saveUninitialized: true,
  cookie: {
    expires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 3), // 3 days from now
    maxAge: 1000 * 60 * 60 * 24 * 3, // 3 days in milliseconds
    httpOnly: true
  }
};

Using Flash
new listing created ->flash message new listing created
npm i connect-flash
connect-flash
alert new message once to the user
middleware 
compulsory use of sessions in it 
key and message
req.flash
req.locals

we craetd a flash.ejs to display it in includes 
and include it in the boilerplate
req.flash(for each review listing update delete etc)
message will be displayed


Flash failure 
while search the not exist listing diaplsy the message 



Authentication and Authorization
Authentication
Authentication is the process of verifying who someone is
Authorization
Authorization is the process of verifying what specific applications, files, and data a user has access to

storing password 
store using hashed form
using hashing function 
that we know in information security  
hash code we get as a output

Hashing
What we need to know?
For every input, there is a fixed output
They are one-way functions, we can't get input from output
For a different input, there is a different output but of same length
Small changes in input should bring large changes in output

Salting
Password salting is a technique to protect passwords stored in databases by adding a
string of 32 or more characters and then hashing them.

adding at the start/end of the password 
prevents the hack of passowrd and avoid access 

passport -->express compatiable authentication Middleware for Node.js
npm i passport
npm i passport-local  -->Passport for authenticating With a username and password.
npm i passport-local-mongoose-->
-->passportjs.org

User Model
user : username, password, email
You're free to define your User how you like. Passport-Local Mongoose will add a username,
hash and salt field to store the username, the hashed password and the salt value.
Additionally, Passport-Local Mongoose adds some methods to your Schema. See the API

Configurin Strate
passport.initialize( )
A middleware that initializes passport.
passport.session( )
A web application needs the ability to identify users as they browse from page to page. This series of requests I
and responses, each associated with the same user, is known as a session.
passport.use(new LocalStrategy( User.authenticate( ) ))

signUp user 
GET /signup
POST /signup

Connecting Login Route
How to check if user is logged in ?

req.isAuthenticated() //Passport method
use IsLoggedIn middleware.js where we defined the logic 
also we passed it as a middleware to many routes like edit ,delete ,etc 

/signup
/Login
automatically loggedin and loggedOut


creating the middleware saveRedirectUrl to save the session redirecting url if you are not logging so after login you will login to the same page of redirecting 
use sessions for this

initData.data = initData.data.map((obj) => ({ ...obj, owner: "6841a91db373d94dcc5669e7" }));
using this code we can add new schema in the database;

showing who own the listing ->owner;

starting with Authorization
who will able to edit the listing
listing owner;
edit/delete user;

Setting Authorization for review
author/owner/createdBy


Project Phase 3
#1 Model,view,controller(MVC)
pattern of writing code 

folders
Model
View 
controller->storing core functionality of backend
making code readable
making controller folder and replacing the index route logic in controller folder
shifting the logic from listing.js to controller/listings.js folder 
same for review and user 

Resume -> used MVC framework;


#router.route

